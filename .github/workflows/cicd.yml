# ------------------------------------------------------------------------------
# GitHub Actions ┃ Docker Image CI · Gradle & Docker-Layer Caching · Prod 배포
# ------------------------------------------------------------------------------
# 목적
#   1. main 브랜치 push → 테스트 → Docker 이미지 빌드 → GHCR 푸시
#   2. Gradle 읽기 전용 캐시 + Docker Layer 캐시로 빌드 시간 단축
#   3. 빌드·배포 결과를 Slack Webhook 통보
#   4. 빌드 성공 시 EC2(SSH) 무중단 재배포
# AWS 준비
#   • EC2에 Docker 설치, 보안그룹 22/80(443) 개방
#   • 키페어(PEM) 생성 후 GitHub Secret  SSH_PRIVATE_KEY  등록
#   • SSH_USER(ec2-user/ubuntu), SSH_HOST(퍼블릭 IP), SLACK_WEBHOOK_URL 추가
# ------------------------------------------------------------------------------

name: docker-image-ci

on:
  push:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

# ──────────────────────────────────────────────────────────────────────────────
# 1) Build · Test · Push
# ──────────────────────────────────────────────────────────────────────────────
jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    # 1. Checkout -------------------------------------------------------------
    - uses: actions/checkout@v4

    # 2. Java 17 + Gradle ------------------------------------------------------
    - uses: gradle/actions/setup-gradle@v3
      with:
        java-version: 17
        distribution: temurin
        cache-read-only: true        # post-job 업로드 생략 → 대기 0s

    # 3. Gradle 파일 캐시 ------------------------------------------------------
    - name: Restore Gradle wrapper & modules cache
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/wrapper
          ~/.gradle/caches/modules-*/files-*/*
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: ${{ runner.os }}-gradle-

    # 4. Unit Test ------------------------------------------------------------
    - run: ./gradlew --no-daemon --build-cache --parallel test

    # 5. Buildx ---------------------------------------------------------------
    - uses: docker/setup-buildx-action@v3

    # 6. GHCR Login -----------------------------------------------------------
    - uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    # 7. Docker Metadata ------------------------------------------------------
    - id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

    # 8. Docker Layer Cache ---------------------------------------------------
    - uses: actions/cache@v4
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.ref_name }}
        restore-keys: ${{ runner.os }}-buildx-

    # 9. Build & Push ---------------------------------------------------------
    - uses: docker/build-push-action@v6
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=local,src=/tmp/.buildx-cache
        cache-to:   type=local,dest=/tmp/.buildx-cache,mode=max

    # 10. Slack Notification (CI) --------------------------------------------
    - if: always()
      uses: act10ns/slack@v2.1.0
      with:
        webhook-url: ${{ secrets.SLACK_WEBHOOK_URL }}
        status: ${{ job.status }}
        message: |
          *CI Build* `${{ github.repository }}`
          • *Status:* `${{ job.status }}`
          • *Branch:* `${{ github.ref_name }}`  *Commit:* `${{ github.sha }}`
          • *Image:* `${{ steps.meta.outputs.tags }}`
          • <${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|Logs>

# ──────────────────────────────────────────────────────────────────────────────
# 2) Production Deploy (SSH) – executes only on main
# ──────────────────────────────────────────────────────────────────────────────
  deploy-prod:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
    # 1. Remote SSH Redeploy --------------------------------------------------
    - name: Remote redeploy via SSH
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.SSH_HOST }}
        username: ${{ secrets.SSH_USER }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        script: |
          set -e
          IMAGE=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}

          echo "Login & pull image"
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ${{ env.REGISTRY }} -u ${{ github.actor }} --password-stdin
          docker pull $IMAGE

          echo "Stop & remove old container"
          docker rm -f app || true

          echo "Run new container"
          docker run -d --name app -p 80:8080 --restart unless-stopped $IMAGE

    # 2. Slack Notification (Deploy) -----------------------------------------
    - if: always()
      uses: act10ns/slack@v2.1.0
      with:
        webhook-url: ${{ secrets.SLACK_WEBHOOK_URL }}
        status: ${{ job.status }}
        message: |
          *Prod Deploy* `${{ github.repository }}`
          • *Status:* `${{ job.status }}`
          • *Server:* `${{ secrets.SSH_HOST }}`
          • *Image:* `${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}`
          • <${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|Logs>